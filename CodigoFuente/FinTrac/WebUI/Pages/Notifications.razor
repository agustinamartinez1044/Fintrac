@page "/notifications"
@using BusinessLogic
@using Domain
@using System.Text.RegularExpressions
@inject MemoryDatabase MemoryDatabase
@inject ToastService ToastService
@inject NavigationManager NavigationManager

@if (MemoryDatabase.isLoggedIn)
{

	<PageTitle>Notificaciones</PageTitle>
	<div class="nav-item px-3">
		<NavLink class="nav-link" href="/">
			<span class="oi oi-chevron-left" aria-hidden="true"></span> Volver
		</NavLink>
	</div>

	<div class="col-12">
		<h3>Notificaciones</h3>
		<FontAwesomeIcon Icon="fa-dollar-sign" />

	</div>

	@if (recievedInvitations.Any())
	{
		<div>
			<table class="table">
				<thead>
					<tr>
						<th scope="col">Nombre</th>
						<th scope="col">Email</th>
						<th scope="col">Acciones</th>
					</tr>
				</thead>
				<tbody>
					@foreach (var invitation in recievedInvitations)
					{
						<tr>
							<td>@invitation.Admin.Name</td>
							<td>@invitation.Admin.Email</td>
							<td>
								<button class="btn btn-success" @onclick="() => AcceptInvitation(invitation)">Aceptar</button>
								<button class="btn btn-danger" @onclick="() => DeclineInvitation(invitation)">Rechazar</button>
							</td>
						</tr>
					}
				</tbody>
			</table>
		</div>
	}
	else
	{
		<p>No hay notificaciones pendientes.</p>

	}


	@code {
	private InvitationService _invitationService;
	private User CurrentUser;
	List<Invitation> recievedInvitations;

	protected override void OnInitialized()
	{
		if (MemoryDatabase.isLoggedIn)
		{
			CurrentUser = MemoryDatabase.currentUser;
			_invitationService = new InvitationService(MemoryDatabase);
			recievedInvitations = CurrentUser.RecievedInvitations;
		}
	}

	void AcceptInvitation(Invitation invitationAccepted)
	{
		try
		{
			_invitationService.AcceptInvitation(invitationAccepted.ID);
			NavigationManager.NavigateTo("/");
			ToastService.Notify(new(ToastType.Success, "Invitación aceptada con éxito!"));
		}
		catch (Exception e)
		{
			ToastService.Notify(new(ToastType.Danger, $"Error: {e.Message}."));
		}

	}

	void DeclineInvitation(Invitation invitationDeclined)
	{
		try
		{
			_invitationService.Delete(invitationDeclined.ID);
			NavigationManager.NavigateTo("/");
			ToastService.Notify(new(ToastType.Success, "Invitación rechazada con éxito!"));
		}
		catch (Exception e)
		{
			ToastService.Notify(new(ToastType.Danger, $"Error: {e.Message}."));
		}

	}

	}
}
else
{
	try
	{
		NavigationManager.NavigateTo("/login");
	}
	catch
	{

	}
}