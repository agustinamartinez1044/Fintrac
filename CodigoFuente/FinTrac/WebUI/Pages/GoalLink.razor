@page "/goal/{token}"

@using Domain
@using Domain.DataTypes
@inject MemoryDatabase MemoryDatabase
@inject NavigationManager NavigationManager;

@if (_report != null)
{
    <p>@goal.Title</p>
    <p>
        Categorías:
        @foreach (Category category in @goal.Categories)
        {
        <p class="p-0">@category.Name </p>
        }
                    </p>
    <p>Objetivo: Gastar menos de $@goal.MaxAmount</p>
    <p>Gastado actualmente: $@_report.AmountSpent</p>
}
else
{
    <p>Goal not found. Redirecting to error page...</p>
    Task.Delay(2000);
    NavigationManager.NavigateTo("/error");

}

@code {
    [Parameter]
    public string Token { get; set; }
    private Goal goal;
    private Domain.Workspace _workspace;
    private Domain.GoalsReport _report;


    protected override void OnInitialized()
    {
        goal = FindGoalByToken(Token);
        _report = GenerateReport();
    }

    private Goal FindGoalByToken(string token)
    {
        List<User> allUsers = MemoryDatabase.Users;

        foreach (var user in allUsers)
        {
            foreach (var workspace in user.WorkspaceList)
            {
                var goal = workspace.GoalList.FirstOrDefault(g => g.Token == token);

                if (goal != null)
                {
                    _workspace = goal.Workspace;
                    return goal;
                }
            }
        }
        return null;
    }

    private GoalsReport GenerateReport()
    {
        if (goal != null)
        {
            GoalsReport report = new GoalsReport
                {
                    WorkSpace = _workspace,
                    Goal = goal
                };
            report.CalculateReport();
            return report;
        }
        else
        {
            return null;
        }
    }

}