@page "/workspace"
@using BusinessLogic
@using Domain
@using System.Text.RegularExpressions
@inject MemoryDatabase MemoryDatabase
@inject ToastService ToastService
@inject NavigationManager NavigationManager

@if (MemoryDatabase.isLoggedIn)
{

	<PageTitle>Workspace @workspace.Name</PageTitle>

	<div class="col-12">
		<h3>Workspace @workspace.Name</h3>
		<FontAwesomeIcon Icon="fa-dollar-sign" />
		<p>Usuarios en el Workspace: @(guestUsers != null ? guestUsers.Count : 0)</p>
		<div class="d-flex justify-content-between align-items-center m-1">
			<div class="ms-auto">
				<button class="btn btn-primary" @onclick="() => ShowEditWorkspaceModal()">Editar Workspace</button>
			</div>
		</div>

		<div class="d-flex justify-content-between align-items-center m-1">
			<div class="ms-auto">
				<button class="btn btn-danger" @onclick="() => ShowDeleteWorkspaceModal()">Abandonar Workspace</button>
			</div>
		</div>

	</div>

	<div class="row  mb-5">
		@foreach (var item in lista)
		{
			<div class="col-12">
				<Card Class="m-2 list-group-item" Style="width: auto;" id="@($"card-{item.Key}")">
					<CardBody>
						<div class="d-flex justify-content-between align-items-center">
							<div>
								<span style="color:black">
									<i class="oi oi-@(item.Icon)" aria-hidden="true" style="display: inline-block;"></i>
								</span>
								@item.Name
							</div>
							<NavLink @onclick="() => HandleDetails(item.Key)">
								Ver detalles <i class="oi oi-arrow-right"></i>
							</NavLink>
						</div>
					</CardBody>
				</Card>
			</div>
		}
	</div>

	@if (showEditWorkspaceModal)
	{
		<div class="modal fade show" style="display: block; background: rgba(0, 0, 0, 0.5);" tabindex="-1" role="dialog">
			<div class="modal-dialog" role="document">
				<div class="modal-content">
					<div class="modal-header">
						<h5 class="modal-title">Editar nombre del Workspace</h5>
						<button type="button" class="close" aria-label="Close" @onclick="() => HideEditWorkspaceModal()">
							<span aria-hidden="true">&times;</span>
						</button>
					</div>
					<div class="modal-body">
						<div class="form-group">
							<label for="workspaceName">Nombre del Workspace</label>
							<input type="text" class="form-control" id="workspaceName" @bind="nameWorkspace" />
						</div>
						<div class="modal-footer">
							<button type="button" class="btn btn-secondary" @onclick="() => HideEditWorkspaceModal()">Cancelar</button>
							<button type="button" class="btn btn-primary" @onclick="EditWorkspace">Guardar</button>
						</div>
					</div>
				</div>
			</div>
		</div>
	}
	@if (showDeleteWorkspaceModal)
	{
		<div class="modal fade show" style="display: block; background: rgba(0, 0, 0, 0.5);" tabindex="-1" role="dialog">
			<div class="modal-dialog" role="document">
				<div class="modal-content">
					<div class="modal-header">
						<h5 class="modal-title">Confirmar Eliminación</h5>
						<button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="() => HideDeleteWorkspaceModal()">
							<span aria-hidden="true">&times;</span>
						</button>
					</div>
					<div class="modal-body">
						¿Estás seguro de que deseas eliminar este Workspace?
					</div>
					<div class="modal-footer">
						<button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => HideDeleteWorkspaceModal()">Cancelar</button>
						<button type="button" class="btn btn-danger" @onclick="() => DeleteWorkspace()">Aceptar</button>
					</div>
				</div>
			</div>
		</div>

	}



	@code {
	private WorkspaceService _workspaceService;
	private User UserAdmin;
	private User CurrentUser;
	private List<User> guestUsers;
	private Domain.Workspace workspace;
	private bool showEditWorkspaceModal = false;
	private bool showDeleteWorkspaceModal = false;
	private string nameWorkspace;

	public class ListItem
	{
		public string Key { get; set; }
		public string Name { get; set; }
		public string Icon { get; set; }
	}


	private List<ListItem> lista = new List<ListItem>
	{
		new ListItem { Key = "GuestUsers", Name ="Usuarios Invitados", Icon = "person" },
		new ListItem { Key = "AccountList", Name = "Cuentas Asociadas", Icon = "credit-card" },
		new ListItem { Key = "TransactionList", Name = "Transacciones", Icon = "dollar" },
		new ListItem { Key = "ReportList", Name = "Reportes", Icon = "document" },
		new ListItem { Key = "ExchangeList", Name = "Lista de Tipos de Cambio", Icon = "loop" },
		new ListItem { Key = "CategoryList", Name = "Categorias", Icon = "list" },
		new ListItem { Key = "GoalList", Name ="Objetivos", Icon = "target" }
	};


	protected override void OnInitialized()
	{
		if (MemoryDatabase.isLoggedIn)
		{
			CurrentUser = MemoryDatabase.currentUser;
			workspace = MemoryDatabase.currentWorkspace;
			nameWorkspace = workspace.Name;
			_workspaceService = new WorkspaceService(MemoryDatabase);
			guestUsers = _workspaceService.ListGuestUsers(workspace);
		}
	}

	private void HandleDetails(String key)
	{

		NavigationManager.NavigateTo($"/workspace/{key}");
	}
	private void ShowEditWorkspaceModal()
	{
		showEditWorkspaceModal = true;
	}

	private void HideEditWorkspaceModal()
	{
		showEditWorkspaceModal = false;
	}

	private void EditWorkspace()
	{
		try
		{
			User currentUser = CurrentUser;
			_workspaceService.UpdateName(workspace, nameWorkspace);

			ToastService.Notify(new(ToastType.Success, "Workspace editado correctamente."));
			HideEditWorkspaceModal();
		}
		catch (Exception e)
		{
			ToastService.Notify(new(ToastType.Danger, $"Error: {e.Message}."));
		}
		NavigationManager.NavigateTo("/");
	}

	private void ShowDeleteWorkspaceModal()
	{
		showDeleteWorkspaceModal = true;
	}

	private void HideDeleteWorkspaceModal()
	{
		showDeleteWorkspaceModal = false;
	}

	private void DeleteWorkspace()
	{
		try
		{
			if (CurrentUser == workspace.UserAdmin)
			{
				_workspaceService.DeleteWorkspace(workspace);
				ToastService.Notify(new(ToastType.Success, "Workspace eliminado correctamente."));
				HideDeleteWorkspaceModal();
				NavigationManager.NavigateTo("/");

			}
			else
			{
				// Agregar metodo en UserService para eliminar un usuario que no es el admin de un workspace
				ToastService.Notify(new(ToastType.Success, "Workspace eliminado correctamente."));
				HideDeleteWorkspaceModal();
				NavigationManager.NavigateTo("/");
			}


		}
		catch (Exception e)
		{
			ToastService.Notify(new(ToastType.Danger, $"Error: {e.Message}."));
		}
		NavigationManager.NavigateTo("/");
	}
}
}
else
{
	try
	{
		NavigationManager.NavigateTo("/login");
	}
	catch
	{

	}
}