@page "/workspace/TransactionList"
@using System.Text.Json
@using Domain
@using Domain.DataTypes
@using Microsoft.EntityFrameworkCore;
@inject FintracContext FintracContext
@inject ToastService ToastService
@inject NavigationManager NavigationManager

@if (FintracContext.isLoggedIn)
{
    <PageTitle>Lista de transacciones</PageTitle>
    <div class="nav-item px-3">
        <NavLink class="nav-link" href="/workspace">
            <span class="oi oi-chevron-left" aria-hidden="true"></span> Volver
        </NavLink>
    </div>

    <div class="col-12">
        <div class="d-flex justify-content-between align-items-center">
            <h3>Lista de Transacciones</h3>
            <button class="btn btn-primary" @onclick="() => ShowAddTransactionModal()">Agregar una transacción</button>
        </div>
        @if (transactions.Any())
        {
            <table class="table">
                <thead>
                    <tr>
                        <th>Título</th>
                        <th>Fecha</th>
                        <th>Monto</th>
                        <th>Moneda</th>
                        <th>Cuenta</th>
                        <th>Categoría</th>
                        <th>Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var transaction in transactions)
                    {
                        <tr>
                            <td>@transaction.Title</td>
                            <td>@transaction.CreationDate.ToShortDateString()</td>
                            <td>@transaction.Amount.ToString("N2")</td>
                            <td>@transaction.Currency</td>
                            <td>@transaction.Account.Name</td>
                            <td>@transaction.Category.Name</td>
                            <td>
                                <button class="btn btn-primary" @onclick="() => ShowEditTransactionModal(transaction)">Editar</button>
                                <button class="btn btn-secondary" @onclick="() => DuplicateTransaction(transaction)">Duplicar</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            <p>No hay transacciones registradas</p>
        }
    </div>
    @if (showAddTransactionModal)
    {
        <div class="modal fade show" style="display: block; background: rgba(0, 0, 0, 0.5);" tabindex="-1" role="dialog">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Agregar una transacción</h5>
                        <button type="button" class="close" aria-label="Close" @onclick="() => HideAddTransactionModal()">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <div class="form-group">
                            <label for="title">Título</label>
                            <input type="text" class="form-control" id="title" @bind="newTransaction.Title" />
                        </div>
                        <div class="form-group">
                            <label for="creationDate">Fecha de Creación</label>
                            <input type="date" class="form-control" id="creationDate" @bind="newTransaction.CreationDate" max="@DateTime.Today.ToString("yyyy-MM-dd")" />
                        </div>
                        <div class="form-group">
                            <label for="amount">Monto</label>
                            <input type="number" class="form-control" id="amount" @bind="newTransaction.Amount" step="0.01" min="0" />
                        </div>
                        <div class="form-group">
                            <label for="currency">Moneda</label>
                            <select class="form-control" id="currency" @bind="newTransaction.Currency">
                                <option value="" disabled selected>Seleccionar</option>
                                @foreach (var value in Enum.GetValues(typeof(CurrencyType)))
                                {
                                    <option value="@value">@value</option>
                                }
                            </select>
                        </div>
                        <div class="form-group">
                            <label for="category">Categoría</label>
                            <select class="form-control" id="category" @bind="selectedCategoryName">
                                @if (categories.Any())
                                {
                                    <option value="" disabled selected>Seleccionar</option>
                                    @foreach (var category in categories)
                                    {
                                        <option value="@category.Name">@category.Name</option>
                                    }
                                }
                                else
                                {
                                    <option value="" disabled selected>No hay opción disponible</option>
                                }
                            </select>
                        </div>

                        <div class="form-group">
                            <label for="account">Cuenta</label>
                            <select class="form-control" id="account" @bind="selectedAccountName">
                                @if (accounts.Any())
                                {
                                    <option value="" disabled selected>Seleccionar</option>
                                    @foreach (var account in accounts)
                                    {
                                        <option value="@account.Name">@account.Name</option>
                                    }
                                }
                                else
                                {
                                    <option value="" disabled selected>No hay opción disponible</option>
                                }
                            </select>
                        </div>

                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="() => HideAddTransactionModal()">Cancelar</button>
                        <button type="button" class="btn btn-primary" @onclick="AddTransaction">Guardar</button>
                    </div>
                </div>
            </div>
        </div>
    }

    @if (showEditTransactionModal)
    {
        <div class="modal fade show" style="display: block; background: rgba(0, 0, 0, 0.5);" tabindex="-1" role="dialog">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Editar una transacción</h5>
                        <button type="button" class="close" aria-label="Close" @onclick="() => HideEditTransactionModal()">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <div class="form-group">
                            <label for="title">Título</label>
                            <input type="text" class="form-control" id="title" @bind="titleEditTrasaction" />
                        </div>
                        <div class="form-group">
                            <label for="amount">Monto</label>
                            <input type="number" class="form-control" id="amount" @bind="amountEditTrasaction" step="0.01" min="0" />
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="() => HideEditTransactionModal()">Cancelar</button>
                        <button type="button" class="btn btn-primary" @onclick="() => EditTransaction(titleEditTrasaction, amountEditTrasaction)">Guardar</button>
                    </div>
                </div>
            </div>
        </div>
    }
}

@code {
    private User CurrentUser;
    private Domain.Workspace workspace;
    private TransactionService _transactionService;
    private WorkspaceService _workspaceService;
    private AccountService _accountService;
    private CategoryService _categoryService;
    private List<Transaction> transactions;
    private bool showEditTransactionModal = false;
    private bool showAddTransactionModal = false;
    private Transaction newTransaction;
    private Transaction selectedTransaction;
    private Transaction editedTransaction;
    private List<Domain.Category> categories;
    private List<Domain.Account> accounts;
    private string selectedCategoryName;
    private string selectedAccountName;
    private Account selectedAccount;
    private Category selectedCategory;
    private double amountEditTrasaction;
    private string titleEditTrasaction;
    private Transaction duplicatedTransaction;
    private List<User> GuestUsers;

    protected override void OnInitialized()
    {
        if (FintracContext.isLoggedIn)
        {
            CurrentUser = FintracContext.currentUser;
            workspace = FintracContext.currentWorkspace;
            _workspaceService = new WorkspaceService(FintracContext);
            _transactionService = new TransactionService(FintracContext);
            _accountService = new AccountService(FintracContext);
            _categoryService = new CategoryService(FintracContext);
            newTransaction = new Transaction();
            categories = workspace.Categories;
            accounts = workspace.Accounts;
            var workspaceData = FintracContext.Users
                .Include(u => u.Workspaces)
                .FirstOrDefault(u => u.Email == CurrentUser.Email);
            var workspaceAccounts = FintracContext.Users
                .Include(u => u.Workspaces)
                .ThenInclude(w => w.Accounts)
                .FirstOrDefault(u => u.Email == CurrentUser.Email);
            var workspaceCategories = FintracContext.Users
                .Include(u => u.Workspaces)
                .ThenInclude(w => w.Categories)
                .FirstOrDefault(u => u.Email == CurrentUser.Email);
            var workspaceExchanges = FintracContext.Users
                .Include(u => u.Workspaces)
                .ThenInclude(w => w.Exchanges)
                .FirstOrDefault(u => u.Email == CurrentUser.Email);
            var accountsTransactions = FintracContext.Users
                .Include(u => u.Workspaces)
                .ThenInclude(w => w.Accounts)
                .ThenInclude(a => a.Transactions)
                .FirstOrDefault(u => u.Email == CurrentUser.Email);
            transactions = _workspaceService.ListAllTransactionsAllAcounts(workspace);
        }
    }

    private void ShowEditTransactionModal(Transaction transaction)
    {
        showEditTransactionModal = true;
        editedTransaction = transaction;
        titleEditTrasaction = transaction.Title;
        amountEditTrasaction = transaction.Amount;
    }

    private void HideEditTransactionModal()
    {
        showEditTransactionModal = false;
    }
    private void EditTransaction(string titleEditTrasaction, double amountEditTrasaction)
    {
        try
        {
            _transactionService.Modify(editedTransaction, titleEditTrasaction, amountEditTrasaction);
            ToastService.Notify(new ToastMessage
                {
                    Type = ToastType.Success,
                    Message = "Transaccion editada con éxito"
                });
            transactions = _workspaceService.ListAllTransactionsAllAcounts(workspace);
        }
        catch (Exception e)
        {
            ToastService.Notify(new ToastMessage
                {
                    Type = ToastType.Danger,
                    Message = $"Error: {e.Message}"
                });
        }
        HideEditTransactionModal();
    }

    private void DuplicateTransaction(Transaction transaction)
    {
        try
        {
            duplicatedTransaction = new Transaction
                {
                    Title = transaction.Title,
                    CreationDate = DateTime.Today,
                    Amount = transaction.Amount,
                    Currency = transaction.Currency,
                    Category = transaction.Category,
                    Account = transaction.Account
                };
            _transactionService.Add(transaction.Account, duplicatedTransaction);
            ToastService.Notify(new ToastMessage
                {
                    Type = ToastType.Success,
                    Message = "Transaccion duplicada con éxito"
                });
            transactions = _workspaceService.ListAllTransactionsAllAcounts(workspace);
        }
        catch (Exception e)
        {
            ToastService.Notify(new ToastMessage
                {
                    Type = ToastType.Danger,
                    Message = $"Error: {e.Message}"
                });
        }
    }

    private void ShowAddTransactionModal()
    {
        showAddTransactionModal = true;
    }
    private void HideAddTransactionModal()
    {
        showAddTransactionModal = false;
    }

    private void AddTransaction()
    {
        try
        {
            selectedAccount = _accountService.Get(workspace, selectedAccountName);
            selectedCategory = _categoryService.Get(workspace, selectedCategoryName);
            newTransaction.Category = selectedCategory;
            newTransaction.Account = selectedAccount;
            _transactionService.Add(selectedAccount, newTransaction);
            ToastService.Notify(new ToastMessage
                {
                    Type = ToastType.Success,
                    Message = "Cuenta agregada con éxito"
                });
            transactions = _workspaceService.ListAllTransactionsAllAcounts(workspace);
        }
        catch (Exception e)
        {
            ToastService.Notify(new ToastMessage
                {
                    Type = ToastType.Danger,
                    Message = $"Error: {e.Message}"
                });
        }
        HideAddTransactionModal();
        newTransaction = new Transaction();
    }
}

