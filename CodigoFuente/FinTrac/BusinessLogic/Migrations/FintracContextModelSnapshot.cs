// <auto-generated />
using System;
using BusinessLogic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BusinessLogic.Migrations
{
    [DbContext(typeof(FintracContext))]
    partial class FintracContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("GoalId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("WorkspaceID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GoalId");

                    b.HasIndex("WorkspaceID");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("Domain.Exchange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<double>("DollarValue")
                        .HasColumnType("float");

                    b.Property<int>("WorkspaceID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WorkspaceID");

                    b.ToTable("Exchange");
                });

            modelBuilder.Entity("Domain.Goal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("MaxAmount")
                        .HasColumnType("float");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WorkspaceID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WorkspaceID");

                    b.ToTable("Goal");
                });

            modelBuilder.Entity("Domain.Invitation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("AdminId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserEmail")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserToInviteId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("WorkspaceID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("AdminId");

                    b.HasIndex("UserEmail");

                    b.HasIndex("UserToInviteId");

                    b.HasIndex("WorkspaceID");

                    b.ToTable("Invitation");
                });

            modelBuilder.Entity("Domain.User", b =>
                {
                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Email");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.Workspace", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserAdminEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("UserAdminEmail");

                    b.ToTable("Workspace");
                });

            modelBuilder.Entity("Domain.Category", b =>
                {
                    b.HasOne("Domain.Goal", null)
                        .WithMany("Categories")
                        .HasForeignKey("GoalId");

                    b.HasOne("Domain.Workspace", "Workspace")
                        .WithMany("CategoryList")
                        .HasForeignKey("WorkspaceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Workspace");
                });

            modelBuilder.Entity("Domain.Exchange", b =>
                {
                    b.HasOne("Domain.Workspace", "Workspace")
                        .WithMany("ExchangeList")
                        .HasForeignKey("WorkspaceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Workspace");
                });

            modelBuilder.Entity("Domain.Goal", b =>
                {
                    b.HasOne("Domain.Workspace", "Workspace")
                        .WithMany("GoalList")
                        .HasForeignKey("WorkspaceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Workspace");
                });

            modelBuilder.Entity("Domain.Invitation", b =>
                {
                    b.HasOne("Domain.User", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.User", null)
                        .WithMany("RecievedInvitations")
                        .HasForeignKey("UserEmail");

                    b.HasOne("Domain.User", "UserToInvite")
                        .WithMany()
                        .HasForeignKey("UserToInviteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Workspace", "Workspace")
                        .WithMany()
                        .HasForeignKey("WorkspaceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("UserToInvite");

                    b.Navigation("Workspace");
                });

            modelBuilder.Entity("Domain.Workspace", b =>
                {
                    b.HasOne("Domain.User", "UserAdmin")
                        .WithMany("WorkspaceList")
                        .HasForeignKey("UserAdminEmail")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserAdmin");
                });

            modelBuilder.Entity("Domain.Goal", b =>
                {
                    b.Navigation("Categories");
                });

            modelBuilder.Entity("Domain.User", b =>
                {
                    b.Navigation("RecievedInvitations");

                    b.Navigation("WorkspaceList");
                });

            modelBuilder.Entity("Domain.Workspace", b =>
                {
                    b.Navigation("CategoryList");

                    b.Navigation("ExchangeList");

                    b.Navigation("GoalList");
                });
#pragma warning restore 612, 618
        }
    }
}
